load symbolic-reasoning.maude

fmod ACTION is
    pr NAT .
    sort Action .
    op I`(_`) : Nat -> Action .
    op X`(_`) : Nat -> Action .
    op Y`(_`) : Nat -> Action .
    op Z`(_`) : Nat -> Action .
    op H`(_`) : Nat -> Action .
    op S`(_`) : Nat -> Action .
    op T`(_`) : Nat -> Action .
    op CX`(_,_`) : Nat Nat -> Action .
    op CY`(_,_`) : Nat Nat -> Action .
    op CZ`(_,_`) : Nat Nat -> Action .
    op SWAP`(_,_`) : Nat Nat -> Action .
    op CCX`(_,_,_`) : Nat Nat Nat -> Action .
    op CCZ`(_,_,_`) : Nat Nat Nat -> Action .
    op CSWAP`(_,_,_`) : Nat Nat Nat -> Action .
endfm

view Action from TRIV to ACTION is
    sort Elt to Action .
endv

fmod ACTION-LIST is
    pr LIST{Action} * (
        sort NeList{Action} to NeActionList,
        sort List{Action} to ActionList
    ) .
endfm

fmod EQUIV-CHECKING is
    pr ACTION-LIST .
    pr MATRIX .
    pr SET{Nat} * (sort NeSet{Nat} to NeIdxSet, sort Set{Nat} to IdxSet) .

    var BL : Bool .
    var S : Scalar .
    vars A : Action .
    vars AL AL' : ActionList .
    vars MAX IDX : Nat .
    vars N N' N1 N2 N3 N4 : Nat .
    vars M M' M1 M2 M3 M4 M5 : Matrix .
    vars V V0 V' V0' Phi : Matrix .
    vars B0' B1' B2' B3' : Matrix .
    vars IF : Info .
    vars IS : IdxSet .

    sort Info .
    op const:_ : IdxSet -> Info [ctor] .
    op getConst : Info -> IdxSet .
    eq getConst(const: IS) = IS .

    --- N -> I (x) I (x) ...
    op I[_] : Nat -> Matrix .
    eq I[0] (x) M = M .
    eq M (x) I[0] = M .
    ceq I[N] = I (x) I[sd(N, 1)] if N > 0 .

    op buildGate1 : Nat Nat Matrix -> Matrix .
    op buildGate2 : Nat Nat Nat Matrix Matrix -> Matrix . 
    op buildGate3 : Nat Nat Nat Nat Matrix Matrix Matrix -> Matrix .
    --- suppose that N1 < N2
    ceq buildGate1(N1, N2, M) = I[N1] (x) M (x) I[N2 - N1 - 1]
    if N1 < N2 .
    --- suppose that N1 < N2 < N3
    ceq buildGate2(N1, N2, N3, M1, M2) = I[N1] (x) M1 (x) I[N2 - N1 - 1] (x) M2 (x) I[N3 - N2 - 1]
    if N1 < N2 /\ N2 < N3 .
    --- suppose that N1 < N2 < N3 < N4
    ceq buildGate3(N1, N2, N3, N4, M1, M2, M3) = I[N1] (x) M1 (x) I[N2 - N1 - 1] (x) M2 (x) I[N3 - N2 - 1] (x) M3 (x) I[N4 - N3 - 1]
    if N1 < N2 /\ N2 < N3 /\ N3 < N4 .

    --- build whole unitary matrix U = U_m \dots U_0
    op buildWholeUnitary : ActionList -> Matrix .
    op buildWholeUnitary : ActionList Nat -> Matrix .
    ceq buildWholeUnitary(AL) = buildWholeUnitary(AL, N) if N := findN(AL) .
    eq buildWholeUnitary(A AL, N) = buildWholeUnitary(AL, N) x buildUnitary(A, N) .
    eq buildWholeUnitary(nil, N) = I .

    --- mapping an action to an actual unitary gate
    op buildUnitary : Action Nat -> Matrix .
    --- I gate
    eq buildUnitary((I(N1)), N2) = I[N2] .
    --- X gate
    eq buildUnitary((X(N1)), N2) = buildGate1(N1, N2, X) .
    --- Y gate
    eq buildUnitary((Y(N1)), N2) = buildGate1(N1, N2, Y) .
    --- Z gate
    eq buildUnitary((Z(N1)), N2) = buildGate1(N1, N2, Z) .
    --- H gate
    eq buildUnitary((H(N1)), N2) = buildGate1(N1, N2, H) .
    --- S gate
    eq buildUnitary((S(N1)), N2) = buildGate1(N1, N2, S) .
    --- T gate
    eq buildUnitary((T(N1)), N2) = buildGate1(N1, N2, T) .
    --- CX gate
    --- CX = B0(x)I + B3(x)X
    --- suppose that N1 < N2
    ceq buildUnitary((CX(N1, N2)), N3) = M1 + M2
    if N1 < N2
    /\ M1 := buildGate2(N1, N2, N3, B0, I)
    /\ M2 := buildGate2(N1, N2, N3, B3, X) .
    --- suppose that N1 > N2
    ceq buildUnitary((CX(N1, N2)), N3) = M1 + M2
    if N1 > N2
    /\ M1 := buildGate2(N2, N1, N3, I, B0)
    /\ M2 := buildGate2(N2, N1, N3, X, B3) .
    --- CY = B0(x)I + B3(x)Y .
    --- suppose that N1 < N2
    ceq buildUnitary((CY(N1, N2)), N3) = M1 + M2
    if N1 < N2
    /\ M1 := buildGate2(N1, N2, N3, B0, I)
    /\ M2 := buildGate2(N1, N2, N3, B3, Y) .
    --- suppose that N1 > N2
    ceq buildUnitary((CY(N1, N2)), N3) = M1 + M2
    if N1 > N2
    /\ M1 := buildGate2(N2, N1, N3, I, B0)
    /\ M2 := buildGate2(N2, N1, N3, Y, B3) .
    --- CZ gate
    --- CX = B0(x)I + B3(x)Z
    --- suppose that N1 < N2
    ceq buildUnitary((CZ(N1, N2)), N3) = M1 + M2
    if N1 < N2
    /\ M1 := buildGate2(N1, N2, N3, B0, I)
    /\ M2 := buildGate2(N1, N2, N3, B3, Z) .
    --- suppose that N1 > N2
    ceq buildUnitary((CZ(N1, N2)), N3) = M1 + M2
    if N1 > N2
    /\ M1 := buildGate2(N2, N1, N3, I, B0)
    /\ M2 := buildGate2(N2, N1, N3, Z, B3) .
    --- SWAP gate
    --- SWAP = CX(N1, N2) x CX(N2, N1) x CX(N1, N2)
    ceq buildUnitary((SWAP(N1, N2)), N3) = M1 x M2 x M1
    if M1 := buildUnitary(CX(N1, N2), N3)
    /\ M2 := buildUnitary(CX(N2, N1), N3) .
    --- CCX gate 
    --- CCX = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B1 + B3(x)B3(x)B2
    --- suppose that N1 < N2 < N3
    ceq buildUnitary((CCX(N1, N2, N3)), N4) = M1 + M2 + M3 + M4
    if N1 < N2 /\ N2 < N3
    /\ M1 := buildGate3(N1, N2, N3, N4, B0, I, I)
    /\ M2 := buildGate3(N1, N2, N3, N4, B3, B0, I)
    /\ M3 := buildGate3(N1, N2, N3, N4, B3, B3, B1)
    /\ M4 := buildGate3(N1, N2, N3, N4, B3, B3, B2) .
    --- suppose that N1 > N2 > N3
    ceq buildUnitary((CCX(N1, N2, N3)), N4) = M1 + M2 + M3 + M4
    if N1 > N2 /\ N2 > N3
    /\ M1 := buildGate3(N3, N2, N1, N4, I, I, B0)
    /\ M2 := buildGate3(N3, N2, N1, N4, I, B0, B3)
    /\ M3 := buildGate3(N3, N2, N1, N4, B1, B3, B3)
    /\ M4 := buildGate3(N3, N2, N1, N4, B2, B3, B3) .
    --- CCZ gate 
    --- CCZ = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B0 + (-1) . B3(x)B3(x)B3
    --- suppose that N1 < N2 < N3
    ceq buildUnitary((CCZ(N1, N2, N3)), N4) = M1 + M2 + M3 + (-1) . M4
    if N1 < N2 /\ N2 < N3
    /\ M1 := buildGate3(N1, N2, N3, N4, B0, I, I)
    /\ M2 := buildGate3(N1, N2, N3, N4, B3, B0, I)
    /\ M3 := buildGate3(N1, N2, N3, N4, B3, B3, B0)
    /\ M4 := buildGate3(N1, N2, N3, N4, B3, B3, B3) .
    --- suppose that N1 > N2 > N3
    ceq buildUnitary((CCZ(N1, N2, N3)), N4) = M1 + M2 + M3 + (-1) . M4
    if N1 > N2 /\ N2 > N3
    /\ M1 := buildGate3(N3, N2, N1, N4, I, I, B0)
    /\ M2 := buildGate3(N3, N2, N1, N4, I, B0, B3)
    /\ M3 := buildGate3(N3, N2, N1, N4, B0, B3, B3)
    /\ M4 := buildGate3(N3, N2, N1, N4, B3, B3, B3) .
    --- CSWAP gate
    --- CSWAP = B0(x)I(x)I + B3(x)B0(x)B0 + B3(x)B1(x)B2 + B3(x)B2(x)B1 + B3(x)B3(x)B3
    --- suppose that N1 < N2 < N3
    ceq buildUnitary((CSWAP(N1, N2, N3)), N4) = M1 + M2 + M3 + M4 + M5
    if N1 < N2 /\ N2 < N3
    /\ M1 := buildGate3(N1, N2, N3, N4, B0, I, I)
    /\ M2 := buildGate3(N1, N2, N3, N4, B3, B0, B0)
    /\ M3 := buildGate3(N1, N2, N3, N4, B3, B1, B2)
    /\ M4 := buildGate3(N1, N2, N3, N4, B3, B2, B1) 
    /\ M5 := buildGate3(N1, N2, N3, N4, B3, B3, B3) .
    --- suppose that N1 > N2 > N3
    ceq buildUnitary((CSWAP(N1, N2, N3)), N4) = M1 + M2 + M3 + M4 + M5
    if N1 > N2 /\ N2 > N3
    /\ M1 := buildGate3(N3, N2, N1, N4, I, I, B0)
    /\ M2 := buildGate3(N3, N2, N1, N4, B0, B0, B3)
    /\ M3 := buildGate3(N3, N2, N1, N4, B2, B1, B3)
    /\ M4 := buildGate3(N3, N2, N1, N4, B1, B2, B3) 
    /\ M5 := buildGate3(N3, N2, N1, N4, B3, B3, B3) .

    op findN : ActionList -> Nat .
    op findN* : ActionList Nat -> Nat .
    eq findN(AL) = findN*(AL, 0) .
    eq findN*(nil, N) = N + 1 .
    eq findN*(I(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(X(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(Y(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(Z(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(H(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(S(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(T(N1) AL, N2) = findN*(AL, max(N1, N2)) .
    eq findN*(CX(N1, N2) AL, N3) = findN*(AL, max(max(N1, N2), N3)) .
    eq findN*(CY(N1, N2) AL, N3) = findN*(AL, max(max(N1, N2), N3)) .
    eq findN*(CZ(N1, N2) AL, N3) = findN*(AL, max(max(N1, N2), N3)) .
    eq findN*(SWAP(N1, N2) AL, N3) = findN*(AL, max(max(N1, N2), N3)) .
    eq findN*(CCX(N1, N2, N3) AL, N4) = findN*(AL, max(max(max(N1, N2), N3), N4)) .
    eq findN*(CCZ(N1, N2, N3) AL, N4) = findN*(AL, max(max(max(N1, N2), N3), N4)) .
    eq findN*(CSWAP(N1, N2, N3) AL, N4) = findN*(AL, max(max(max(N1, N2), N3), N4)) .

    op checkEquiv : ActionList ActionList Info -> Bool .
    ceq checkEquiv(AL, AL', IF) = checkWithBasis(AL, AL', IF, N)
    if N := findN(AL AL') .

    op checkEquiv : ActionList ActionList -> Bool .
    ceq checkEquiv(AL, AL') = checkWithBasis(AL, AL', (const: empty), N)
    if N := findN(AL AL') .

    op checkWithBasis : ActionList ActionList Info Nat -> Bool .
    eq checkWithBasis(AL, AL', IF, N) = checkWithBasis(AL, AL', IF, N, 2 ^ N, 0) .
    
    --- first check
    op checkWithBasis : ActionList ActionList Info Nat Nat Nat -> Bool .
    ceq checkWithBasis(AL, AL', IF, N, MAX, 0) = 
    if (V x (V)^+) == (V' x (V')^+) then 
        checkWithBasis*(AL, AL', IF, N, MAX, 1, V, V')
    else 
        false
    fi
    if Phi := basis(0, N)
    /\ V := calWithBasis(AL, Phi, N)
    /\ V' := calWithBasis(AL', Phi, N) .

    --- subsequent check
    op checkWithBasis* : ActionList ActionList Info Nat Nat Nat Matrix Matrix -> Bool .
    ceq checkWithBasis*(AL, AL', IF, N, MAX, IDX, V0, V0') =
    if (isValid(IDX, N, getConst(IF))) then
        checkWithBasis**(AL, AL', IF, N, MAX, IDX, V0, V0')
    else
        checkWithBasis*(AL, AL', IF, N, MAX, IDX + 1, V0, V0')
    fi
    if IDX < MAX .
    eq checkWithBasis*(AL, AL', IF, N, MAX, IDX, V0, V0') = true [owise] .

    --- check with a valid basis
    op checkWithBasis** : ActionList ActionList Info Nat Nat Nat Matrix Matrix -> Bool .
    ceq checkWithBasis**(AL, AL', IF, N, MAX, IDX, V0, V0') =
    if (V x (V)^+) == (V' x (V')^+) then 
        if (V0 x (V)^+) == (V0' x (V')^+) then
            checkWithBasis*(AL, AL', IF, N, MAX, IDX + 1, V0, V0')
        else
            false
        fi 
    else
        false
    fi
    if Phi := basis(IDX, N)
    /\ V := calWithBasis(AL, Phi, N)
    /\ V' := calWithBasis(AL', Phi, N) .
    --- [print "\nPhi = " Phi "\nV = " V "\nV' = " V' "\nV0 = " V0 "\nV0' = " V0'] .

    --- whether this basis is needed for checking
    op isValid : Nat Nat IdxSet -> Bool .
    eq isValid(IDX, N, empty) = true . 
    eq isValid(IDX, N, (N', IS)) = 
    if ((IDX & (1 << (N - N' - 1))) > 0) then false else isValid(IDX, N, IS) fi .

    --- calculate M x V
    op calWithBasis : ActionList Matrix Nat -> Matrix .
    eq calWithBasis(nil, V, N) = V .
    ceq calWithBasis(A AL, V, N) = calWithBasis(AL, V', N)
    if M := buildUnitary(A, N)
    /\ V' := M x V .

    --- prepare a basis vector V
    op basis : Nat Nat -> Matrix .
    op basis : Nat Nat Matrix -> Matrix .
    eq basis(N1, N2) = basis(N1, N2, nil) .
    ceq basis(N1, N2, V) =  if (N1 & 1) == 0 then 
        basis(N1 >> 1, N2 - 1, |0> (x) V) 
    else 
        basis(N1 >> 1, N2 - 1, |1> (x) V)
    fi
    if N2 > 0 .
    eq basis(N1, 0, V) = V .

    --- simplify a matrix to obtain a canonical form
    op simplifyMatrix : Matrix -> Matrix .
    eq simplifyMatrix(M) = replaceI(M) .
    
    --- replace I with B0 + B3 if any
    op replaceI : Matrix -> Matrix .
    op replaceI* : Matrix -> Matrix .
    op replaceI** : Matrix -> Matrix .
    op replaceI*** : Matrix -> Matrix .
    eq replaceI(M1 + M2) = replaceI(M1) + replaceI(M2) .
    eq replaceI(M) = replaceI*(M) [owise] .
    eq replaceI*(S . M) = S . replaceI**(M) .
    eq replaceI*(M) = replaceI**(M) [owise] .
    eq replaceI**(B0' (x) M) = B0 (x) replaceI**(M) .
    eq replaceI**(B1' (x) M) = B1 (x) replaceI**(M) .
    eq replaceI**(B2' (x) M) = B2 (x) replaceI**(M) .
    eq replaceI**(B3' (x) M) = B3 (x) replaceI**(M) .
    eq replaceI**(I (x) M) = (B0 + B3) (x) replaceI**(M) .
    eq replaceI**(B0') = B0 .
    eq replaceI**(B1') = B1 .
    eq replaceI**(B2') = B2 .
    eq replaceI**(B3') = B3 .
    eq replaceI**(I) = (B0 + B3) .
endfm