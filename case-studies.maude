load equivalence-checking.maude
load debug.maude

***********************************************************************************
****  I./ Case studies for equivalence checking of equivalent quantum circuits  ***
***********************************************************************************

****************************************************************
*** Control Reversal                                         ***
****************************************************************

red checkEquiv(
    CZ(0, 1), 
    CZ(1, 0)
) .

red checkEquiv(
    CX(0, 1), 
    H(1) CZ(0, 1) H(1)
) .

red checkEquiv(
    H(0) H(1) CZ(0, 1) H(0) H(1), 
    H(0) H(1) CZ(1, 0) H(0) H(1)
) .

red checkEquiv(
    H(0) CX(0, 1) H(0),
    H(1) CX(1, 0) H(1)
) .

red checkEquiv(
    H(0) H(1) CX(0, 1) H(0) H(1),
    CX(1, 0)
) .

red checkEquiv(
    H(0) H(1) CX(0, 1),
    CX(1, 0) H(0) H(1)
) .

****************************************************************
*** Distributed CNOT                                         ***
****************************************************************

red checkEquiv(
    CX(0, 2),
    CX(0, 1) CX(1, 2) CX(0, 1) CX(1, 2)
) .

red checkEquiv(
    CX(0, 2),
    CX(1, 2) CX(0, 1) CX(1, 2) CX(0, 1)
) .

****************************************************************
*** CNOT mirror                                              ***
****************************************************************

red checkEquiv(
    CX(0, 1) CX(1, 2),
    CX(0, 2) CX(1, 2) CX(0, 1)
) .

red checkEquiv(
    CX(0, 2) CX(0, 2) CX(0, 1) CX(1, 2),
    CX(0, 2) CX(1, 2) CX(0, 1) CX(1, 2) CX(0, 1) CX(0, 1) CX(1, 2)
) .

red checkEquiv(
    CX(0, 2) CX(0, 2) CX(0, 1) CX(1, 2),
    CX(0, 2) CX(1, 2) CX(0, 1) CX(1, 2) CX(1, 2)
) .

red checkEquiv(
    CX(0, 2) CX(0, 2) CX(0, 1) CX(1, 2),
    CX(0, 2) CX(1, 2) CX(0, 1)
) .

****************************************************************
*** Parallel to Λ CNOT                                       ***
****************************************************************

red checkEquiv(
    CX(1, 2) CX(0, 1) CX(0, 2),
    CX(0, 1) CX(1, 2)
) .

red checkEquiv(
    CX(1, 2) CX(0, 1) CX(0, 2),
    CX(0, 2) CX(1, 2) CX(0, 1)
) .

red checkEquiv(
    CX(0, 1) CX(1, 2) CX(0, 2),
    CX(1, 2) CX(0, 1)
) .

red checkEquiv(
    CX(0, 1) CX(1, 2) CX(0, 2),
    CX(0, 2) CX(0, 1) CX(1, 2)
) .

red checkEquiv(
    CX(0, 1) CX(0, 2),
    CX(0, 1) CX(0, 1) CX(1, 2) CX(0, 1) CX(1, 2)
) .

red checkEquiv(
    CX(0, 1) CX(0, 2),
    CX(1, 2) CX(0, 1) CX(1, 2)
) .

****************************************************************
*** Superdense coding as a state transfer                    ***
****************************************************************

red checkEquiv(
    CX(1, 3) CX(0, 2),
    CX(1, 3) H(2) CZ(0, 2) H(2)
) .

--- a counterexample
--- red checkEquiv(
---     CX(1, 3) CX(0, 2),
---     H(2) CX(1, 2) CX(1, 3) CZ(0, 2) H(2)
--- ) .

--- a counterexample
--- red checkEquiv(
---     CX(1, 3) CX(0, 2),
---     H(2) CX(2, 3) CX(1, 2) CZ(0, 2) CX(2, 3) H(2)
--- ) .

red checkEquiv(
    H(2) CX(1, 2) CX(1, 3) CZ(0, 2) H(2),
    H(2) CX(2, 3) CX(1, 2) CZ(0, 2) CX(2, 3) H(2)
) .

***************************************************************************************
***  II./ Case studies for equivalence checking of non-equivalent quantum circuits  ***
***  We randomely remove one gate from each circuit                                 ***
***  Or change indices to which gates are applied                                   ***
***************************************************************************************

****************************************************************
*** Control Reversal                                         ***
****************************************************************

red checkEquiv(
    CZ(0, 2),
    CZ(1, 0)
) == false .

red checkEquiv(
    CX(0, 1), 
    H(1) CZ(0, 1)
) == false .

red checkEquiv(
    H(0) H(1) CZ(0, 1) H(0) H(1), 
    H(0) CZ(1, 0) H(0) H(1)
) == false .

red checkEquiv(
    H(0) CX(0, 1) H(0),
    H(1) CX(1, 0)
) == false .

red checkEquiv(
    H(0) CX(0, 1) H(0) H(1),
    CX(1, 0)
) == false .

red checkEquiv(
    H(0) H(1) CX(1, 0),
    CX(1, 0) H(0) H(1)
) == false .

****************************************************************
*** Distributed CNOT                                         ***
****************************************************************

red checkEquiv(
    CX(0, 2),
    CX(0, 1) CX(1, 2) CX(1, 2)
) == false .

red checkEquiv(
    CX(0, 2),
    CX(1, 2) CX(1, 2) CX(0, 1)
) == false .

****************************************************************
*** CNOT mirror                                              ***
****************************************************************

red checkEquiv(
    CX(0, 1) CX(1, 2),
    CX(1, 2) CX(0, 1)
) == false .

red checkEquiv(
    CX(0, 2) CX(0, 2) CX(0, 1) CX(1, 2),
    CX(0, 2) CX(0, 1) CX(1, 2) CX(0, 1) CX(0, 1) CX(1, 2)
) == false .

red checkEquiv(
    CX(0, 2) CX(0, 2) CX(0, 1) CX(1, 2),
    CX(0, 2) CX(1, 2) CX(1, 2) CX(1, 2)
) == false .

red checkEquiv(
    CX(0, 2) CX(0, 1) CX(1, 2),
    CX(0, 2) CX(1, 2) CX(0, 1)
) == false .

****************************************************************
*** Parallel to Λ CNOT                                       ***
****************************************************************

red checkEquiv(
    CX(0, 1) CX(0, 2),
    CX(0, 1) CX(1, 2)
) == false .

red checkEquiv(
    CX(1, 2) CX(0, 1) CX(0, 2),
    CX(1, 2) CX(0, 1)
) == false .

red checkEquiv(
    CX(1, 2) CX(0, 2),
    CX(1, 2) CX(0, 1)
) == false .

red checkEquiv(
    CX(0, 1) CX(1, 2) CX(0, 2),
    CX(0, 2) CX(1, 2)
) == false .

red checkEquiv(
    CX(0, 1) CX(0, 2),
    CX(0, 1) CX(0, 1) CX(0, 1) CX(1, 2)
) == false .

red checkEquiv(
    CX(0, 1) CX(0, 2),
    CX(1, 2) CX(0, 1)
) == false .

****************************************************************
*** Superdense coding as a state transfer                    ***
****************************************************************

red checkEquiv(
    CX(1, 3) CX(0, 2),
    CX(1, 3) CZ(0, 2) H(2)
) == false .

red checkEquiv(
    H(2) CX(1, 2) CX(1, 3) CZ(0, 2) H(2),
    H(2) CX(2, 3) CZ(0, 2) CX(2, 3) H(2)
) == false .

eof

****************************************************************
*** Superdense coding as a state transfer                    ***
****************************************************************

--- a counterexample
--- red checkEquiv(
---     CX(1, 3) CX(0, 2),
---     H(2) CX(1, 2) CX(1, 3) CZ(0, 2) H(2)
--- ) .

*** [Evidence]
*** U = CX(1, 3) CX(0, 2)
*** (|0> x <0|)(x)(|0> x <0|)(x)I(x)I + 
*** (|0> x <0|)(x)(|1> x <1|)(x)I(x)|0> x <1| + 
*** (|0> x <0|)(x)(|1> x <1|)(x)I(x)|1> x <0| + 
*** (|1> x <1|)(x)(|1> x <1|)(x)(|0> x <1|)(x)|0> x <1| + 
*** (|1> x <1|)(x)(|1> x <1|)(x)(|0> x <1|)(x)|1> x <0| + 
*** (|1> x <1|)(x)(|1> x <1|)(x)(|1> x <0|)(x)|0> x <1| +
*** (|1> x <1|)(x)(|1> x <1|)(x)(|1> x <0|)(x)|1> x <0| +
*** (|1> x <1|)(x)(|0> x <0|)(x)(|0> x <1|)(x)I + 
*** (|1> x <1|)(x)(|0> x <0|)(x)(|1> x <0|)(x)I

*** U' = H(2) CX(1, 2) CX(1, 3) CZ(0, 2) H(2)
*** (|0> x <0|)(x)(|0> x <0|)(x)I(x)I + 
*** -1 . (|0> x <0|)(x)(|1> x <1|)(x)I(x)|0> x <1| + 
*** -1 . (|0> x <0|)(x)(|1> x <1|)(x)I(x)|1> x <0| + 
*** -1 . (|1> x <1|)(x)(|1> x <1|)(x)(|0> x <1|)(x)|0> x <1| + 
*** -1 . (|1> x <1|)(x)(|1> x <1|)(x)(|0> x <1|)(x)|1> x <0| + 
*** (|1> x <1|)(x)(|1> x <1|)(x)(|1> x <0|)(x)|0> x <1| + 
*** (|1> x <1|)(x)(|1> x <1|)(x)(|1> x <0|)(x)|1> x <0| +
*** (|1> x <1|)(x)(|0> x <0|)(x)(|0> x <1|)(x)I + 
*** (|1> x <1|)(x)(|0> x <0|)(x)(|1> x <0|)(x)I